/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.text.NumberFormat;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import subtitlesearcher.SubtitleSearcher;

/**
 *
 * @author Alp Sayin
 */
public class SubtitleSearcherGui extends javax.swing.JFrame
{

    /**
     * Creates new form SubtitleSearcherGui
     */
    public SubtitleSearcherGui()
    {
        initComponents();
        readConfiguration();
        if(browseDirectory.length() == 0)
            browseDirectory = System.getProperty("user.home");
        searchStringField.requestFocus();
        filepathTextField.setText(browseDirectory);
        jfc = new JFileChooser(new File(browseDirectory));
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jfc.setMultiSelectionEnabled(false);
        jfc.setFileFilter(new FileNameExtensionFilter("Movie Files", "avi","mp4","mkv","wmv","mpg","flv","3gp","mov","mpeg","rm","divx"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        typeButtonGroup = new javax.swing.ButtonGroup();
        titleLabel = new javax.swing.JLabel();
        seriesCheckBox = new javax.swing.JCheckBox();
        moviesCheckBox = new javax.swing.JCheckBox();
        searchTitleLabel = new javax.swing.JLabel();
        seasonLabel = new javax.swing.JLabel();
        episodeLabel = new javax.swing.JLabel();
        titleField = new javax.swing.JTextField();
        seasonField = new javax.swing.JFormattedTextField();
        episodeField = new javax.swing.JFormattedTextField();
        conventionalSearchStringLabel = new javax.swing.JLabel();
        searchStringField = new javax.swing.JTextField();
        searchWparamButton = new javax.swing.JButton();
        yearField = new javax.swing.JFormattedTextField();
        yearLabel = new javax.swing.JLabel();
        exampleLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        filepathTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        searchWfileButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OpenSubtitles.org Subtitle Searcher");
        setLocation(new java.awt.Point(320, 240));

        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        titleLabel.setText("OpenSubtitles Subtitle Searcher");

        typeButtonGroup.add(seriesCheckBox);
        seriesCheckBox.setSelected(true);
        seriesCheckBox.setText("TV Series");
        seriesCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                seriesCheckBoxActionPerformed(evt);
            }
        });

        typeButtonGroup.add(moviesCheckBox);
        moviesCheckBox.setText("Movies");
        moviesCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                moviesCheckBoxActionPerformed(evt);
            }
        });

        searchTitleLabel.setText("Title");

        seasonLabel.setText("Season");

        episodeLabel.setText("Episode");

        titleField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                titleFieldActionPerformed(evt);
            }
        });

        ((JFormattedTextField)seasonField).setFormatterFactory(factory);
        seasonField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                seasonFieldActionPerformed(evt);
            }
        });

        ((JFormattedTextField)episodeField).setFormatterFactory(factory);
        episodeField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                episodeFieldActionPerformed(evt);
            }
        });

        conventionalSearchStringLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        conventionalSearchStringLabel.setText("Conventional Search String");

        searchStringField.getDocument().addDocumentListener(documentListener);
        searchStringField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                searchStringFieldActionPerformed(evt);
            }
        });

        searchWparamButton.setText("Search with Parameters");
        searchWparamButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                searchWparamButtonActionPerformed(evt);
            }
        });

        ((JFormattedTextField)episodeField).setFormatterFactory(factory);
        yearField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                yearFieldActionPerformed(evt);
            }
        });

        yearLabel.setText("Year");

        exampleLabel.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        exampleLabel.setForeground(new java.awt.Color(102, 102, 102));
        exampleLabel.setText("e.g. 2 broke girls s03e14");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 255));
        jLabel1.setText("github.com/alpsayin");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jLabel1MouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Search by selecting a movie file");

        filepathTextField.setEditable(false);
        filepathTextField.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                filepathTextFieldMouseClicked(evt);
            }
        });

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                browseButtonActionPerformed(evt);
            }
        });

        searchWfileButton.setText("Search with file");
        searchWfileButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                searchWfileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(seriesCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(moviesCheckBox))
                            .addComponent(conventionalSearchStringLabel))
                        .addGap(250, 250, 250))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(searchStringField)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(searchTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(seasonLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(seasonField)
                                    .addComponent(titleField)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(episodeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                                    .addComponent(yearLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(yearField, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(episodeField)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(exampleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchWparamButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(filepathTextField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(searchWfileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(seriesCheckBox)
                    .addComponent(moviesCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTitleLabel)
                    .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(seasonLabel)
                    .addComponent(seasonField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(episodeLabel)
                    .addComponent(episodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yearField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(conventionalSearchStringLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchStringField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exampleLabel)
                    .addComponent(searchWparamButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filepathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchWfileButton)
                .addContainerGap())
        );

        titleField.getDocument().addDocumentListener(documentListener);
        titleField.getDocument().addDocumentListener(documentListener);
        yearField.getDocument().addDocumentListener(documentListener);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchWparamButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_searchWparamButtonActionPerformed
    {//GEN-HEADEREND:event_searchWparamButtonActionPerformed
        performSearch();
    }//GEN-LAST:event_searchWparamButtonActionPerformed

    private void searchStringFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_searchStringFieldActionPerformed
    {//GEN-HEADEREND:event_searchStringFieldActionPerformed
        performSearch();
    }//GEN-LAST:event_searchStringFieldActionPerformed

    private void episodeFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_episodeFieldActionPerformed
    {//GEN-HEADEREND:event_episodeFieldActionPerformed
        performSearch();
    }//GEN-LAST:event_episodeFieldActionPerformed

    private void seasonFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_seasonFieldActionPerformed
    {//GEN-HEADEREND:event_seasonFieldActionPerformed
        performSearch();
    }//GEN-LAST:event_seasonFieldActionPerformed

    private void titleFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_titleFieldActionPerformed
    {//GEN-HEADEREND:event_titleFieldActionPerformed
        performSearch();
    }//GEN-LAST:event_titleFieldActionPerformed

    private void seriesCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_seriesCheckBoxActionPerformed
    {//GEN-HEADEREND:event_seriesCheckBoxActionPerformed
        typeSelect();
    }//GEN-LAST:event_seriesCheckBoxActionPerformed

    private void moviesCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_moviesCheckBoxActionPerformed
    {//GEN-HEADEREND:event_moviesCheckBoxActionPerformed
        typeSelect();
    }//GEN-LAST:event_moviesCheckBoxActionPerformed

    private void yearFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_yearFieldActionPerformed
    {//GEN-HEADEREND:event_yearFieldActionPerformed
        performSearch();
    }//GEN-LAST:event_yearFieldActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jLabel1MouseClicked
    {//GEN-HEADEREND:event_jLabel1MouseClicked
        if(Desktop.isDesktopSupported())
        {
            try
            {
                Desktop.getDesktop().browse(new URI("http://github.com/alpsayin"));
            }
            catch(IOException ioe)
            {
                ioe.printStackTrace();
            }
            catch(URISyntaxException use)
            {
                use.printStackTrace();
            }
        }
    }//GEN-LAST:event_jLabel1MouseClicked

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_browseButtonActionPerformed
    {//GEN-HEADEREND:event_browseButtonActionPerformed
        int retVal = jfc.showOpenDialog(this);
        File currentDirectory = jfc.getCurrentDirectory();
        browseDirectory = currentDirectory.getAbsolutePath();
        writeBrowseDirectory();
        if(retVal == JFileChooser.APPROVE_OPTION)
        {
            File f = jfc.getSelectedFile();
            filepathTextField.setText(f.getAbsolutePath());
            filelength = f.length();
        }
        else
        {
            filepathTextField.setText(browseDirectory);
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void searchWfileButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_searchWfileButtonActionPerformed
    {//GEN-HEADEREND:event_searchWfileButtonActionPerformed
        if(filelength > 0)
        {
            type = SubtitleSearcher.SearchType.FILESIZE;
            ss = new SubtitleSearcher(type, filelength);
            ss.openBrowser();
        }
    }//GEN-LAST:event_searchWfileButtonActionPerformed

    private void filepathTextFieldMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_filepathTextFieldMouseClicked
    {//GEN-HEADEREND:event_filepathTextFieldMouseClicked
        ActionEvent ae = new ActionEvent(evt, evt.getID(), "MouseClick");
        browseButtonActionPerformed(ae);
    }//GEN-LAST:event_filepathTextFieldMouseClicked
    public void createConfiguration()
    {
        InputStream defaultConfigurationInputStream = getClass().getResourceAsStream("/conf/SubtitleSearcher.conf");
        File confFile = new File(System.getProperty("user.home")+File.separator+".subtitle_searcher"+File.separator+"conf"+File.separator+"SubtitleSearcher.conf");
        
        try
        {
            if (!confFile.exists())
            {
                byte[] buffer = new byte[4096];
                confFile.getParentFile().mkdirs();
                confFile.createNewFile();
                BufferedOutputStream bos = new  BufferedOutputStream(new FileOutputStream(confFile));
                BufferedInputStream bis = new BufferedInputStream(defaultConfigurationInputStream);
                int nreadbytes;
                int offset = 0;
                while(true)
                {
                    nreadbytes = bis.read(buffer);
                    if(nreadbytes == -1)
                        break;
                    bos.write(buffer,offset,nreadbytes);
                    offset += nreadbytes;
                };
                bis.close();
                bos.close();
            }
        }
        catch (IOException ex)
        {
            Logger.getLogger(SubtitleSearcherGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void readConfiguration()
    {
        boolean browseDirectoryFound = false;
        try
        {
            File confFile = new File(System.getProperty("user.home")+File.separator+".subtitle_searcher"+File.separator+"conf"+File.separator+"SubtitleSearcher.conf");
            System.out.println(confFile.getAbsolutePath());
            if(!confFile.exists())
                createConfiguration();
            
            Scanner scan = new Scanner(confFile);
            while(scan.hasNextLine())
            {
                String line = scan.nextLine();
                for(int i=0; i<SETTINGS.length; i++)
                {
                    String setting = SETTINGS[i];
                    int index = line.toLowerCase().indexOf(setting+'=');
                    if( index != 0)
                    {
                        String value = line.substring(index+setting.length()+2);
                        System.out.println(value);
                        browseDirectory = value;
                        browseDirectoryFound = true;
                    }
                }
            }
            scan.close();
        }
        catch (IOException ex)
        {
            Logger.getLogger(SubtitleSearcherGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(!browseDirectoryFound)
        {
            browseDirectory = System.getProperty("user.home");
        }
    }
    
    private void writeBrowseDirectory()
    {
        try
        {
            File confFile = new File(System.getProperty("user.home")+File.separator+".subtitle_searcher"+File.separator+"conf"+File.separator+"SubtitleSearcher.conf");
            File tempConfFile = File.createTempFile(System.getProperty("user.home")+File.separator+".subtitle_searcher"+File.separator+"conf"+File.separator+"SubtitleSearcher",".conf");
            PrintStream ps = new PrintStream(tempConfFile);
            if (!confFile.exists())
                createConfiguration();
            Scanner scan = new Scanner(confFile);
            while(scan.hasNextLine())
            {
                String line = scan.nextLine();
                String setting = SETTINGS[0]; // "BrowseDirectory"
                {
                    int index = line.toLowerCase().indexOf(setting+'=');
                    if( index != 0)
                    {
                        line = setting+'='+browseDirectory;
                    }
                }
                ps.println(line);
            }
            scan.close();
            ps.close();
            confFile.delete();
            tempConfFile.renameTo(confFile);
        }
        catch (IOException ex)
        {
            Logger.getLogger(SubtitleSearcherGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void performSearch()
    {
        typeSelect();
        yearInterpret();
        if(ss == null)
        {
            String seasonString = seasonField.getText();
            String episodeString = episodeField.getText();
            if(seasonString.length()==0 || episodeString.length()==0)
            {
                ss = new SubtitleSearcher(type, titleField.getText(), year);
            }
            else
            {
                ss = new SubtitleSearcher(type, titleField.getText(), Integer.parseInt(seasonString), Integer.parseInt(episodeString), year);
            }
        }
        ss.openBrowser();
    }
    public void typeSelect()
    {
        if(moviesCheckBox.isSelected())
            type = SubtitleSearcher.SearchType.MOVIES;
        else if(seriesCheckBox.isSelected())
            type = SubtitleSearcher.SearchType.SERIES;
        else
            type = SubtitleSearcher.SearchType.SERIES;
        if(ss != null)
            ss.setType(type);
    }
    public void yearInterpret()
    {
        String yearString = yearField.getText();
        if(yearString.length() > 0)
            year = Integer.parseInt(yearString); 
        else
            year = -1;
        if(ss != null)
            ss.setYear(year);
    }
    public void searchInterpret()
    {
        ss = new SubtitleSearcher(type, searchStringField.getText()+" ", year);
        if(ss.decodeEpisodeIdentifier())
        {
            titleField.setText(ss.getTitle());
            seasonField.setText(""+ss.getSeason());
            episodeField.setText(""+ss.getEpisode());
        }
        else
        {
            titleField.setText(searchStringField.getText());
            seasonField.setText("");
            episodeField.setText("");
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(SubtitleSearcherGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(SubtitleSearcherGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(SubtitleSearcherGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(SubtitleSearcherGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new SubtitleSearcherGui().setVisible(true);
            }
        });
    }

private class SubtitleEntryListener implements DocumentListener
    {
        @Override
        public void insertUpdate(DocumentEvent e)
        {
            if(e.getDocument() == seasonField.getDocument())
            {
                
            }
            else if(e.getDocument() == episodeField.getDocument())
            {
                
            }
            else if(e.getDocument() == searchStringField.getDocument())
            {
                searchInterpret();
            }
        }

        @Override
        public void removeUpdate(DocumentEvent e)
        {
            if(e.getDocument() == seasonField.getDocument())
            {
                
            }
            else if(e.getDocument() == episodeField.getDocument())
            {
                
            }
            else if(e.getDocument() == searchStringField.getDocument())
            {
                searchInterpret();
            }
        }

        @Override
        public void changedUpdate(DocumentEvent e)
        {
            if(e.getDocument() == seasonField.getDocument())
            {
                
            }
            else if(e.getDocument() == episodeField.getDocument())
            {
                
            }
            else if(e.getDocument() == searchStringField.getDocument())
            {
                searchInterpret();
            }
        }
    }
    private final String[] SETTINGS = {"BrowseDirectory"};
    private SubtitleEntryListener documentListener = new SubtitleEntryListener();
    private JFileChooser jfc;
    private String browseDirectory;
    private NumberFormat seFormat = NumberFormat.getIntegerInstance();
    private NumberFormatter seFormatter = new NumberFormatter(seFormat);
    private DefaultFormatterFactory factory = new DefaultFormatterFactory(seFormatter);
    private SubtitleSearcher.SearchType type;
    private SubtitleSearcher ss;
    private int year = -1;
    private long filelength = -1;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel conventionalSearchStringLabel;
    private javax.swing.JTextField episodeField;
    private javax.swing.JLabel episodeLabel;
    private javax.swing.JLabel exampleLabel;
    private javax.swing.JTextField filepathTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JCheckBox moviesCheckBox;
    private javax.swing.JTextField searchStringField;
    private javax.swing.JLabel searchTitleLabel;
    private javax.swing.JButton searchWfileButton;
    private javax.swing.JButton searchWparamButton;
    private javax.swing.JTextField seasonField;
    private javax.swing.JLabel seasonLabel;
    private javax.swing.JCheckBox seriesCheckBox;
    private javax.swing.JTextField titleField;
    private javax.swing.JLabel titleLabel;
    private javax.swing.ButtonGroup typeButtonGroup;
    private javax.swing.JTextField yearField;
    private javax.swing.JLabel yearLabel;
    // End of variables declaration//GEN-END:variables
}
